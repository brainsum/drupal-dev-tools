diff --git a/grumphp/src/Collection/FilesCollection.php b/grumphp/src/Collection/FilesCollection.php
index 5135353..1bf6115 100644
--- a/grumphp/src/Collection/FilesCollection.php
+++ b/grumphp/src/Collection/FilesCollection.php
@@ -16,7 +16,7 @@ use Traversable;
 /**
  * @extends ArrayCollection<int, \SplFileInfo>
  */
-class FilesCollection extends ArrayCollection implements \Serializable
+class FilesCollection extends ArrayCollection
 {
     /**
      * Adds a rule that files must match.
@@ -220,9 +220,9 @@ class FilesCollection extends ArrayCollection implements \Serializable
      * SplFileInfo cannot be serialized. Therefor, we help PHP a bit.
      * This stuff is used for running tasks in parallel.
      */
-    public function serialize(): string
+    public function __serialize(): array
     {
-        return serialize($this->map(function (SplFileInfo $fileInfo): string {
+        return ($this->map(function (SplFileInfo $fileInfo): string {
             return $fileInfo instanceof SymfonySplFileInfo
                 ? $fileInfo->getRelativePathname()
                 : $fileInfo->getPathname();
diff --git a/grumphp/src/Fixer/Provider/FixableProcessProvider.php b/grumphp/src/Fixer/Provider/FixableProcessProvider.php
index fb280d8..50a1e0d 100644
--- a/grumphp/src/Fixer/Provider/FixableProcessProvider.php
+++ b/grumphp/src/Fixer/Provider/FixableProcessProvider.php
@@ -6,13 +6,13 @@ namespace GrumPHP\Fixer\Provider;
 
 use GrumPHP\Exception\FixerException;
 use GrumPHP\Fixer\FixResult;
-use Opis\Closure\SerializableClosure;
+use Laravel\SerializableClosure\SerializableClosure;
 use Symfony\Component\Process\Process;
 
 class FixableProcessProvider
 {
     /**
-     * @param Process $process
+     * @param string $command
      * @param int[] $successExitCodes
      *
      * @return callable(): FixResult
diff --git a/grumphp/src/IO/ConsoleIO.php b/grumphp/src/IO/ConsoleIO.php
index 859b9a8..8d4b535 100644
--- a/grumphp/src/IO/ConsoleIO.php
+++ b/grumphp/src/IO/ConsoleIO.php
@@ -14,7 +14,7 @@ use Symfony\Component\Console\Output\OutputInterface;
 use Symfony\Component\Console\Style\StyleInterface;
 use Symfony\Component\Console\Style\SymfonyStyle;
 
-class ConsoleIO implements IOInterface, \Serializable
+class ConsoleIO implements IOInterface
 {
     private $input;
     private $output;
@@ -143,16 +143,16 @@ class ConsoleIO implements IOInterface, \Serializable
      * Serializing this IO will result in an unwritable resource stream.
      * Therefor we serialize the data end build up a new stream instead.
      */
-    public function serialize()
+    public function __serialize(): array
     {
-        return serialize([
+        return [
             'input' => [
                 'arguments' => $this->input->getArguments(),
             ],
             'output' => [
                 'verbosity' => $this->output->getVerbosity(),
             ],
-        ]);
+        ];
     }
 
     /**
@@ -160,7 +160,7 @@ class ConsoleIO implements IOInterface, \Serializable
      * Note: When you run in parallel mode, the stream will be non-blocking.
      * All tasks can write at the same time, which is not optimal.
      */
-    public function unserialize($serialized)
+    public function __unserialize(array $data): void
     {
         $data = unserialize($serialized, ['allowed_classes' => false]);
 
diff --git a/grumphp/src/Locator/GuessedPathsLocator.php b/grumphp/src/Locator/GuessedPathsLocator.php
index 973e618..aa8c4b2 100644
--- a/grumphp/src/Locator/GuessedPathsLocator.php
+++ b/grumphp/src/Locator/GuessedPathsLocator.php
@@ -87,14 +87,14 @@ class GuessedPathsLocator
             $this->ensureOptionalArgumentWithValidSlashes($composerFile->getConfigDefaultPath())
         );
 
-        $projectDir = $this->filesystem->guessPath([
+        $projectDir = $this->filesystem->guessPath(array_filter([
             $projectDirEnv,
             $this->makeOptionalPathAbsolute(
                 $composerFilePath,
                 $this->ensureOptionalArgumentWithValidSlashes($composerFile->getProjectPath())
             ),
             $workingDir
-        ]);
+        ]));
 
         $defaultConfigFile = $this->filesystem->guessFile(
             array_filter([
diff --git a/grumphp/src/Runner/TaskHandler/Middleware/ParallelProcessingMiddleware.php b/grumphp/src/Runner/TaskHandler/Middleware/ParallelProcessingMiddleware.php
index 436f190..dbbc185 100644
--- a/grumphp/src/Runner/TaskHandler/Middleware/ParallelProcessingMiddleware.php
+++ b/grumphp/src/Runner/TaskHandler/Middleware/ParallelProcessingMiddleware.php
@@ -6,6 +6,7 @@ namespace GrumPHP\Runner\TaskHandler\Middleware;
 
 use GrumPHP\Exception\ParallelException;
 use GrumPHP\IO\IOInterface;
+use Laravel\SerializableClosure\SerializableClosure;
 use function Amp\call;
 use function Amp\ParallelFunctions\parallel;
 use Amp\Promise;
@@ -16,7 +17,6 @@ use GrumPHP\Runner\TaskResult;
 use GrumPHP\Runner\TaskResultInterface;
 use GrumPHP\Runner\TaskRunnerContext;
 use GrumPHP\Task\TaskInterface;
-use Opis\Closure\SerializableClosure;
 
 class ParallelProcessingMiddleware implements TaskHandlerMiddlewareInterface
 {
